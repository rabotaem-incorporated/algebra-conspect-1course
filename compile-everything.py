import sys
from dataclasses import dataclass, fields
import subprocess

version_file_suffix = sys.argv[1]


def rewrite(file, text):
    file.seek(0)
    file.truncate()
    file.write(text)


@dataclass
class Config:
    enable_chapters_from_sem1: bool = True
    enable_unfinished_chapters: bool = False
    enable_ticket_references: bool = True

    def write_to_file(self, file):
        rewrite(
            file, 
            "// FIXME: This config is autogenerated and should not be committed!"
            )

        for field in fields(self):
            typst_field_name = field.name.replace("_", "-")
            value = getattr(self, field.name)
            if isinstance(value, bool):
                value = "true" if value else "false"
            else:
                raise NotImplementedError(f"Unknown type for field {field.name}: {type(value)}")
            file.write(f"#let {typst_field_name} = {value}\n")
        
        file.flush()


targets = {
    "algebra-all-with-tickets": Config(
        enable_chapters_from_sem1=True,
    ),
    
    "algebra-all": Config(
        enable_chapters_from_sem1=True,
        enable_ticket_references=False,
    ),

    "algebra-sem2-with-tickets": Config(
        enable_chapters_from_sem1=False,
    ),
}

any_failed = False

with open("config.typ", "r+") as config_file:
    initial_config = config_file.read()

    for target, config in targets.items():
        config.write_to_file(config_file)
        result = subprocess.run(["typst", "compile", "main.typ", f"{target}_{version_file_suffix}.pdf"])

        if result.returncode != 0:
            print(f"Failed to compile {target}")
            any_failed = True

    rewrite(config_file, initial_config)


if any_failed:
    sys.exit(1)
